// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: userinfo.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserInfoSvr service

func NewUserInfoSvrEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserInfoSvr service

type UserInfoSvrService interface {
	RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...client.CallOption) (*RegisterUserRsp, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...client.CallOption) (*GetUserInfoRsp, error)
}

type userInfoSvrService struct {
	c    client.Client
	name string
}

func NewUserInfoSvrService(name string, c client.Client) UserInfoSvrService {
	return &userInfoSvrService{
		c:    c,
		name: name,
	}
}

func (c *userInfoSvrService) RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...client.CallOption) (*RegisterUserRsp, error) {
	req := c.c.NewRequest(c.name, "UserInfoSvr.RegisterUser", in)
	out := new(RegisterUserRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userInfoSvrService) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...client.CallOption) (*GetUserInfoRsp, error) {
	req := c.c.NewRequest(c.name, "UserInfoSvr.GetUserInfo", in)
	out := new(GetUserInfoRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserInfoSvr service

type UserInfoSvrHandler interface {
	RegisterUser(context.Context, *RegisterUserReq, *RegisterUserRsp) error
	GetUserInfo(context.Context, *GetUserInfoReq, *GetUserInfoRsp) error
}

func RegisterUserInfoSvrHandler(s server.Server, hdlr UserInfoSvrHandler, opts ...server.HandlerOption) error {
	type userInfoSvr interface {
		RegisterUser(ctx context.Context, in *RegisterUserReq, out *RegisterUserRsp) error
		GetUserInfo(ctx context.Context, in *GetUserInfoReq, out *GetUserInfoRsp) error
	}
	type UserInfoSvr struct {
		userInfoSvr
	}
	h := &userInfoSvrHandler{hdlr}
	return s.Handle(s.NewHandler(&UserInfoSvr{h}, opts...))
}

type userInfoSvrHandler struct {
	UserInfoSvrHandler
}

func (h *userInfoSvrHandler) RegisterUser(ctx context.Context, in *RegisterUserReq, out *RegisterUserRsp) error {
	return h.UserInfoSvrHandler.RegisterUser(ctx, in, out)
}

func (h *userInfoSvrHandler) GetUserInfo(ctx context.Context, in *GetUserInfoReq, out *GetUserInfoRsp) error {
	return h.UserInfoSvrHandler.GetUserInfo(ctx, in, out)
}
